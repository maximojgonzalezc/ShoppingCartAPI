@inject HttpClient Http
@namespace ShoppingCartUI.Components
@using System.Text.Json

<section class="h-100 h-custom" style="background-color: #d2c9ff;">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12">
                <div class="card card-registration card-registration-2" style="border-radius: 15px;">
                    <div class="card-body p-0">
                        <div class="row g-0">
                            <!-- Product List Section -->
                            <div class="col-lg-8">
                                <div class="p-5">
                                    <div class="d-flex justify-content-between align-items-center mb-5">
                                        <h1 class="fw-bold mb-0">Shopping Cart</h1>
                                        <h6 class="mb-0 text-muted">@cartItems.Count items</h6>
                                    </div>
                                    <hr class="my-4">

                                    @foreach (var item in cartItems)
                                    {
                                        <div class="row mb-4 d-flex justify-content-between align-items-center">
                                            <div class="col-md-2 col-lg-2 col-xl-2">
                                                <img src="@item.Product.ImageURL" class="img-fluid rounded-3" alt="@item.Product.Name">
                                            </div>
                                            <div class="col-md-3 col-lg-3 col-xl-3">
                                                <h6 class="mb-0">@item.Product.Name</h6>
                                            </div>
                                            <div class="col-md-3 col-lg-3 col-xl-2 d-flex">
                                                <button class="btn btn-link px-2" @onclick="() => DecreaseQuantity(item)">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <input min="0" name="quantity" type="number" class="form-control form-control-sm" value="@item.Quantity" />
                                                <button class="btn btn-link px-2" @onclick="() => IncreaseQuantity(item)">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                            <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
                                                <h6 class="mb-0">€ @item.TotalPrice</h6>
                                            </div>
                                            <div class="col-md-1 col-lg-1 col-xl-1 text-end">
                                                <button class="text-muted" @onclick="() => RemoveItem(item)"><i class="fas fa-times"></i></button>
                                            </div>
                                        </div>
                                        <hr class="my-4">
                                    }

                                    <div class="pt-5">
                                        <h6 class="mb-0"><a href="/" class="text-body"><i class="fas fa-long-arrow-alt-left me-2"></i>Back to shop</a></h6>
                                    </div>
                                </div>
                            </div>
                            <!-- Summary Section -->
                            <div class="col-lg-4 bg-body-tertiary">
                                <div class="p-5">
                                    <h3 class="fw-bold mb-5 mt-2 pt-1">Summary</h3>
                                    <hr class="my-4">

                                    <div class="d-flex justify-content-between mb-4">
                                        <h5 class="text-uppercase">items @totalItems</h5>
                                        <h5>€ @totalPrice</h5>
                                    </div>

                                    <button class="btn btn-dark btn-block btn-lg">Proceed to Checkout</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private List<ProductDto> products = new List<ProductDto>();
    private List<CartItem> cartItems = new List<CartItem>();
    private int totalItems;
    private double totalPrice;

    protected override async Task OnInitializedAsync()
{
    try
    {
        // Configurar la solicitud HTTP para obtener productos con la clave de funciones

        //var products = await Http.GetFromJsonAsync<List<ProductDto>>("api/products");

        var request = new HttpRequestMessage(HttpMethod.Get, "api/products");
        request.Headers.Add("x-functions-key", "464246");

        // Enviar la solicitud y obtener la respuesta
        var response = await Http.SendAsync(request);

        // Verificar si la respuesta fue exitosa
        if (response.IsSuccessStatusCode)
        {
            // Leer el contenido de la respuesta como string JSON
            var jsonContent = await response.Content.ReadAsStringAsync();

            // Deserializar el JSON a una lista de ProductDto
                products = JsonSerializer.Deserialize<List<ProductDto>>(jsonContent, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            }) ?? new List<ProductDto>();

            // Inicializar los ítems del carrito con los productos obtenidos
            cartItems = products.Select(p => new CartItem { Product = p, Quantity = 1 }).ToList();
            UpdateCartSummary();
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error fetching products: " + ex.Message);
    }
}


    private void IncreaseQuantity(CartItem item)
    {
        item.Quantity++;
        UpdateCartSummary();
    }

    private void DecreaseQuantity(CartItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            UpdateCartSummary();
        }
    }

    private void RemoveItem(CartItem item)
    {
        cartItems.Remove(item);
        UpdateCartSummary();
    }

    private void UpdateCartSummary()
    {
        totalItems = cartItems.Sum(i => i.Quantity);
        totalPrice = cartItems.Sum(i => CalculateItemTotal(i.Product, i.Quantity));
    }

    private double CalculateItemTotal(ProductDto product, int quantity)
    {
        double total = 0.0;
        bool isSpecialDay = (product.SpecificDate.HasValue && product.SpecificDate.Value.Date == DateTime.Today.Date) ||
                            product.DaysOfWeek.Contains(DateTime.Today.DayOfWeek);

        var specialDiscount = product.Discounts
            .FirstOrDefault(d => isSpecialDay && d.DiscountType == DiscountType.SpecialDay && d.RequiredQuantity <= quantity);

        if (specialDiscount != null)
        {
            int sets = quantity / specialDiscount.RequiredQuantity;
            total += specialDiscount.CalculateDiscount(product.Price, sets * specialDiscount.RequiredQuantity);
            quantity %= specialDiscount.RequiredQuantity;
        }

        var bulkDiscount = product.Discounts
            .FirstOrDefault(d => d.DiscountType == DiscountType.Bulk && d.RequiredQuantity <= quantity);

        if (bulkDiscount != null)
        {
            int sets = quantity / bulkDiscount.RequiredQuantity;
            total += bulkDiscount.CalculateDiscount(product.Price, sets * bulkDiscount.RequiredQuantity);
            quantity %= bulkDiscount.RequiredQuantity;
        }

        total += quantity * product.Price;
        return total;
    }

    private class CartItem
    {
        public ProductDto Product { get; set; }
        public int Quantity { get; set; }
        public double TotalPrice => Quantity * Product.Price;
    }

    private class ProductDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public List<DiscountDto> Discounts { get; set; } = new();
        public List<DayOfWeek> DaysOfWeek { get; set; } = new();
        public DateTime? SpecificDate { get; set; }
        public string ImageURL { get; set; }
    }

    private class DiscountDto
    {
        public int RequiredQuantity { get; set; }
        public double DiscountPercentage { get; set; }
        public DiscountType DiscountType { get; set; }

        public double CalculateDiscount(double basePrice, int quantity)
        {
            return quantity * basePrice * (1 - DiscountPercentage);
        }
    }

    private enum DiscountType
    {
        SpecialDay,
        Bulk
    }
}
